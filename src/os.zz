using <os/type.h>::{ Arch, Type }

using arch::{ get as get_arch }
using eol::{ get as get_eol }
using type::{ get as get_type }

/**
 * Returns the detected operating system type.
 * Example:
 * <pre>
 *   <code>
 *     switch os::type() {
 *       os::type::POSIX () => { }
 *       default => {
 *         error.fail(err::NotImplemented, "Unsupported OS");
 *       }
 *     }
 *   </code>
 * </pre>
 */
export fn type() -> Type
  model symbol(return)
{
  return get_type();
}

/**
 * Returns the detected operating system architecture at compile time.
 * Example:
 * <pre>
 *   <code>
 *   </code>
 * </pre>
 */
export fn arch() -> Arch
  model symbol(return)
{
  return get_arch();
}

/**
 * Returns the detected operating system specific "end-of-line" marker.
 * Example:
 * <pre>
 *   <code>
 *   </code>
 * </pre>
 */
export fn eol() -> char *
  model safe(return)
  model nullterm(return)
  model 1 == len(return) || 2 == len(return)
{
  return get_eol();
}
